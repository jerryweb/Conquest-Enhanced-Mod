{curve "gun_std"}	;// Refers to ballistic.set


;/*============================== Speeds / Muzzle Velocity ==============================*/


(define "global velocity"
	{speed (* 0.75 %gv)}			;// Global muzzle velocity scale for all weapons in "gun" folder.
)

(define "velocity"					;// used in gun file when muzzle velocity is same across all ammo types.
	("global velocity" gv(%mps))
)
(define "velocity m/s"				;// used in gun file when muzzle velocity varies across ammo types.

	("global velocity" gv(%he))		;// stops crash for on AI aim calculations

	{parameters "ap"		("global velocity" gv(%ap))}
	{parameters "apc"		("global velocity" gv(%ap))}
	{parameters "apche"		("global velocity" gv(%ap))}
	{parameters "aphe"		("global velocity" gv(%ap))}
	{parameters "apbc"		("global velocity" gv(%ap))}
	{parameters "apcbc"		("global velocity" gv(%ap))}
	{parameters "apcbche"	("global velocity" gv(%ap))}
	{parameters "aphebc"	("global velocity" gv(%ap))}
	{parameters "aphebc2"	("global velocity" gv(%ap))}

	{parameters "apcr"		("global velocity" gv(%apcr))}
	{parameters "hvap"		("global velocity" gv(%apcr))}
	{parameters "apds"		("global velocity" gv(%apcr))}

	{parameters "he"		("global velocity" gv(%he))}
	{parameters "sm"		("global velocity" gv(%he))}
	{parameters "wp"		("global velocity" gv(%he))}

	{parameters "heat"		("global velocity" gv(%heat))}
	{parameters "heata"		("global velocity" gv(%heat))}
	{parameters "heatb"		("global velocity" gv(%heat))}
	{parameters "heatc"		("global velocity" gv(%heat))}
)


;/*============================== Rate of Fire ==============================*/


(define "fire rate"			;//rate of fire in rounds per minute 
	{recoveryTime (/ 60 %rpm)}
)

(define "reload time"		;//reload time for magazine or shell
	{rechargeTime %seconds}
)


;/*============================== Damages ==============================*/

(define "penetration_long"
	{parameters "%shell" ;// for units with higher range than 205, polynomial curve to simulate closer range engagements
		{projectileDamageTable {20 %a} {100 %b} {155 %c} {205 %d} {%range (+ (* (/ (- 250 %range) (- 250 200)) (- %d %e)) %e)} {(+ %range 20) 0} }
		{range %range %range}
	}
)
(define "penetration_medium"
	{parameters "%shell" ;// for units with higher range than 155 and lower 205, polynomial curve to simulate closer range engagements
		{projectileDamageTable {20 %a} {100 %b} {155 %c} {%range (+ (* (/ (- 205 %range) (- 205 155)) (- %c %d)) %d)} {(+ %range 20) 0} }
		{range %range %range}
	}
)
(define "penetration_short"
	{parameters "%shell" ;// for units with higher range than 100 and lower than 155, polynomial curve to simulate closer range engagements
		{projectileDamageTable {20 %a} {100 %b} {%range (+ (* (/ (- 155 %range) (- 155 100)) (- %b %c)) %c)} {(+ %range 20) 0} }
		{range %range %range}
	}
)
(define "penetration"  ;// penetration drop curve with decreasing penetration after 250m (2km IRL, 1/8th ish Scale)
	{projectileDamageTable {20 %a} {100 %b} {155 %c} {205 %d} {250 %e} {500 (- %e (* 5 (- %a %e)))}} ;// shell penetration over distance
)

(define "armor health"

	{minimumDamageModifier (* 1.0 %damage)} ;// In case only generic value is called

	{parameters "ap" 		{minimumDamageModifier (* 1.00 %damage)}}
	{parameters "apc" 		{minimumDamageModifier (* 1.00 %damage)}}
	{parameters "apche" 	{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "aphe" 		{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "apbc" 		{minimumDamageModifier (* 1.00 %damage)}}
	{parameters "apcbc" 	{minimumDamageModifier (* 1.00 %damage)}}
	{parameters "apcbche" 	{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "aphebc" 	{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "aphebc2" 	{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "apcr" 		{minimumDamageModifier (* 0.75 %damage)}}
	{parameters "hvap" 		{minimumDamageModifier (* 0.75 %damage)}}
	{parameters "apds" 		{minimumDamageModifier (* 0.75 %damage)}}
	{parameters "heat" 		{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "heata" 	{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "heatb" 	{minimumDamageModifier (* 1.25 %damage)}}
	{parameters "heatc" 	{minimumDamageModifier (* 1.25 %damage)}}
	;// HE, WP, SM not included as they have no penetration power modelled.
)

; // Damage logic for AP-type shells with HE filler. Implemented a cubic equation to interpolate. Avoid touching the numbers (very sensitive!).
(define "armor health custom" ;
	{parameters "%shell" 	
		{minimumDamageModifier (- (+ 29 (+ %damage (+ (* 0.35 %filler ) (* 0.0000000075 (* %filler (* %filler %filler))))))  (* 0.00009 (* %filler %filler)))} ; //Filler defined in grams of TNT
	}
)
(define "human health"		;// Damage to human health
	{healthDamage (* 1 %damage)}
)



;/*============================== Accuracies ==============================*/

(define "accuracy_indirect" 	;// for indirect units with more than 200m range
	("curve_indirect" 
		r1(%r1) 					;// direct fire accuracy
		r2(%r2) 					;// indirect fire accuracy
		rmax(%rmax)					;// max range indirect fire accuracy
		range_ap(%range_ap) 
		range_he(%range_he) 
		range_heat(%range_heat) 
		r0(1.00) 					;// global accuracy
		  ap50(0.50)   ap100(1.50)   ap140(4.00)   ap200(6.00)
		heat50(1.20) heat100(3.50) heat140(7.50) heat200(14.00)
	)
)

(define "curve_indirect"
	{parameters "ap"
		("standard_firing_arc")
		{spreading 
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apc"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apche"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "aphe"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apbc"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apcbc"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apcbche"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "aphebc"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "aphebc2"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apcr"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "hvap"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "apds"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { %range_ap (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {(+ %range_ap 10) 10}}
		}
	}
	{parameters "he"
		{spreading
			{radiusTable {0 0} {100 (* 0.50 (* %r2 %r0))} {250 (* 2.0 (* %r2 %r0))} {(- %range_he 0.1) (* %rmax %r0)} {(+ %range_he 10) 60}} ; // Anti-farshoot, accuracy goes haywire past max range
		}
	}
	{parameters "sm"
		{spreading
			{radiusTable {0 0} {100 (* 0.50 (* %r2 %r0))} {250 (* 2.0 (* %r2 %r0))} {%range_he (* %rmax %r0)} {(* %range_he 10) 60}}
		}
	}
	{parameters "wp"
		{spreading
			{radiusTable {0 0} {100 (* 0.50 (* %r2 %r0))} {250 (* 2.0 (* %r2 %r0))} {%range_he (* %rmax %r0)} {(* %range_he 10) 60}}
		}
	}
	{parameters "ic"
		{spreading
			{radiusTable {0 0} {100 (* 0.50 (* %r2 %r0))} {250 (* 2.0 (* %r2 %r0))} {(- %range_he 0.1) (* %rmax %r0)} {(+ %range_he 10) 60}} ; // Anti-farshoot, accuracy goes haywire past max range
		}
	}
	{parameters "heat"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %heat50 (* %r1 %r0))} {100 (* %heat100 (* %r1 %r0))} {140 (* %heat140 (* %r1 %r0))} { %range_heat (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %heat200 %heat140)) %heat140) (* %r1 %r0))} {(+ %range_heat 10) 10}}
		}
	}
	{parameters "heata"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %heat50 (* %r1 %r0))} {100 (* %heat100 (* %r1 %r0))} {140 (* %heat140 (* %r1 %r0))} { %range_heat (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %heat200 %heat140)) %heat140) (* %r1 %r0))} {(+ %range_heat 10) 10}}
		}
	}
	{parameters "heatb"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %heat50 (* %r1 %r0))} {100 (* %heat100 (* %r1 %r0))} {140 (* %heat140 (* %r1 %r0))} { %range_heat (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %heat200 %heat140)) %heat140) (* %r1 %r0))} {(+ %range_heat 10) 10}}
		}
	}
	{parameters "heatc"
		("standard_firing_arc")
		{spreading
			{radiusTable {0 0} {50 (* %heat50 (* %r1 %r0))} {100 (* %heat100 (* %r1 %r0))} {140 (* %heat140 (* %r1 %r0))} { %range_heat (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %heat200 %heat140)) %heat140) (* %r1 %r0))} {(+ %range_heat 10) 10}}
		}
	}
)


(define "accuracy_direct" ;// Accuracy for direct-fire weaponry
	("curve_direct" 
		r1(%r1) 
		range_ap(%range_ap) 
		range_he(%range_he) 
		range_heat(%range_heat) 
		r0(0.50) 								; // global accuracy
		apbc50(0.60) apbc100(1.50) apbc140(3.50) apbc200(6.00)
		  ap50(0.65)   ap100(1.75)   ap140(3.75)   ap200(6.50)
		  he50(0.80)   he100(2.00)   he140(6.00)   he200(12.00)
		apcr50(0.70) apcr100(2.00) apcr140(4.00) apcr200(6.75)
		apds50(1.00) apds100(2.50) apds140(6.00) apds200(10.00)
	)
)
(define "accuracy_spg" ;// Accuracy for SPG direct-fire weaponry
	("curve_direct" 
		r1(%r1) 
		range_ap(%range_ap) 
		range_he(%range_he) 
		range_heat(%range_heat) 
		r0(0.50) 								; // global accuracy
		apbc50(0.60) apbc100(1.50) apbc140(3.50) apbc200(6.00)
		  ap50(0.65)   ap100(1.75)   ap140(3.75)   ap200(6.50)
		  he50(0.80)   he100(2.00)   he140(4.00)   he200(7.50)
		apcr50(0.70) apcr100(2.00) apcr140(4.00) apcr200(6.75)
		apds50(1.00) apds100(2.50) apds140(4.50) apds200(8.00)
	)
)
(define "curve_direct"	;// the code extrapolates where the accuracy point is for max range, knowing the accuracy for the cannon is defined for 200m
	{parameters "ap"
		{spreading 
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apc"
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apche"
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "aphe"
		{spreading
			{radiusTable {0 0} {50 (* %ap50 (* %r1 %r0))} {100 (* %ap100 (* %r1 %r0))} {140 (* %ap140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %ap200 %ap140)) %ap140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apbc"
		{spreading
			{radiusTable {0 0} {50 (* %apbc50 (* %r1 %r0))} {100 (* %apbc100 (* %r1 %r0))} {140 (* %apbc140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apbc200 %apbc140)) %apbc140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apcbc"
		{spreading
			{radiusTable {0 0} {50 (* %apbc50 (* %r1 %r0))} {100 (* %apbc100 (* %r1 %r0))} {140 (* %apbc140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apbc200 %apbc140)) %apbc140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apcbche"
		{spreading
			{radiusTable {0 0} {50 (* %apbc50 (* %r1 %r0))} {100 (* %apbc100 (* %r1 %r0))} {140 (* %apbc140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apbc200 %apbc140)) %apbc140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "aphebc"
		{spreading
			{radiusTable {0 0} {50 (* %apbc50 (* %r1 %r0))} {100 (* %apbc100 (* %r1 %r0))} {140 (* %apbc140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apbc200 %apbc140)) %apbc140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "aphebc2"
		{spreading
			{radiusTable {0 0} {50 (* %apbc50 (* %r1 %r0))} {100 (* %apbc100 (* %r1 %r0))} {140 (* %apbc140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apbc200 %apbc140)) %apbc140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apcr"
		{spreading
			{radiusTable {0 0} {50 (* %apcr50 (* %r1 %r0))} {100 (* %apcr100 (* %r1 %r0))} {140 (* %apcr140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apcr200 %apcr140)) %apcr140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "hvap"
		{spreading
			{radiusTable {0 0} {50 (* %apcr50 (* %r1 %r0))} {100 (* %apcr100 (* %r1 %r0))} {140 (* %apcr140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apcr200 %apcr140)) %apcr140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "apds"
		{spreading
			{radiusTable {0 0} {50 (* %apds50 (* %r1 %r0))} {100 (* %apds100 (* %r1 %r0))} {140 (* %apds140 (* %r1 %r0))} { (- %range_ap 0.01) (* (+ (* (/ (- %range_ap 140) (- 200 140)) (- %apds200 %apds140)) %apds140) (* %r1 %r0))} {%range_ap 20}}
		}
	}
	{parameters "he"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_he 0.01) (* (+ (* (/ (- %range_he 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_he 20}}
		}
	}
	{parameters "sm"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_he 0.01) (* (+ (* (/ (- %range_he 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_he 20}}
		}
	}
	{parameters "wp"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_he 0.01) (* (+ (* (/ (- %range_he 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_he 20}}
		}
	}
	{parameters "ic"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_he 0.01) (* (+ (* (/ (- %range_he 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_he 20}}
		}
	}
	{parameters "heat"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_heat 0.01) (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_heat 20}}
		}
	}
	{parameters "heata"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_heat 0.01) (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_heat 20}}
		}
	}
	{parameters "heatb"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_heat 0.01) (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_heat 20}}
		}
	}
	{parameters "heatc"
		{spreading
			{radiusTable {0 0} {50 (* %he50 (* %r1 %r0))} {100 (* %he100 (* %r1 %r0))} {140 (* %he140 (* %r1 %r0))} { (- %range_heat 0.01) (* (+ (* (/ (- %range_heat 140) (- 200 140)) (- %he200 %he140)) %he140) (* %r1 %r0))} {%range_heat 20}}
		}
	}
)




;/*============================== GLOBAL DEFINES ==============================*/


(define "standard_firing_arc"
	{gravity 3.5}
)
(define "curved_firing_arc"
	{gravity 4.5}
)
(define "artillery_firing_arc"
	{gravity 6.0}
)

(define "light_aa"
	{AimingTolerance 12}
	{SpreadTolerance 0.1}
)

(define "medium_aa"
	{AimingTolerance 12}
	{SpreadTolerance 0.1}
)

(define "heavy_aa"
	{AimingTolerance 5}
	{SpreadTolerance 0.4}
)
(define "direct_settings"
	{SpreadTolerance 0.60}		;// Zeroing up to 60% needed before fire
	{ZeroingAccuracy 0.8 0.65 0.55 0.5 0.45}
	{spreading {SpreadXYRatio 0.4}}
	{parameters "he" {spreading {SpreadXYRatio 1.5}}}
)
(define "indirect_settings"
	{SpreadTolerance 0.60}		;// Zeroing up to 60% needed before fire
	{ZeroingAccuracy 0.8 0.65 0.55 0.5 0.45 0.35}
	{spreading {SpreadXYRatio 3}}
)
;/*============================== RANGES AND SPECIFICS ==============================*/

(define "range_aircraft_gun"
	("standard_firing_arc")
	{range 150 150}
	(mod not "mp"
		{range 275 500}
		{aimingTolerance 15}
		{spreading
			{SpreadPower 1}
			{BurstRecoveryTime 0.5}
			{BurstAccuracy 100 95 90 85 80}
			{SpreadXYRatio	1}
			{radiusTable {0 1} {200 2} {300 5} {350 12}}
		}
	)
	{automatic}
	{aimingTolerance 10}
	{SpreadTolerance 0}			;// Zeroing up to 0% needed before fire
	{spreading
		{SpreadPower 1}
		{BurstRecoveryTime 0.5}
		{BurstAccuracy 100 95 90 85 80}
		{SpreadXYRatio	0.5}
		{radiusTable {0 1} {80 2} {130 5} {200 10}}
	}

	{burst
		{short 20 5}			;// short burst shots on long distance, rand (+-)shots
		{long 50 10}			;// long burst shots on short distance, rand (+-)shots
		{rangeKoef 0.75}		;// rangeKoef * aimRange = max long burst distance
	}
	{SyncedProjectiles 0}		;// not for automatic weapons
)

(define "range_autocannon_12-20"
	("standard_firing_arc")
	{range 150 150}
	{automatic}
	{aimingTolerance 3}
	{SpreadTolerance 0}			;// Zeroing up to 0% needed before fire
	{spreading
		{BurstRecoveryTime 0.5}
		{BurstAccuracy 100 98 95 90 85 80 75 70}
		{SpreadXYRatio	0.5}
	}

	{burst
		{short 2 0.75}			;// short burst shots on long distance, rand (+-)shots
		{long 5 1}				;// long burst shots on short distance, rand (+-)shots
		{rangeKoef 0.5}			;// rangeKoef * aimRange = max long burst distance
	}
	{SyncedProjectiles 0}		;// not for automatic weapons
)


(define "range_autocannon_37-40"
	("standard_firing_arc")
	{range 160 160}
	{automatic}
	{aimingTolerance 3}
	{SpreadTolerance 0}			;// Zeroing up to 0% needed before fire
	{spreading
		{BurstRecoveryTime 0.5}
		{BurstAccuracy 100 95 88 82 75 68 55 32}
		{SpreadXYRatio	0.5}
	}

	{burst
		{short 2 0.75}			;// short burst shots on long distance, rand (+-)shots
		{long 5 1}				;// long burst shots on short distance, rand (+-)shots
		{rangeKoef 0.85}		;// rangeKoef * aimRange = max long burst distance
	}
	{SyncedProjectiles 0}		;// not for automatic weapons
)

(define "range_160"
	("standard_firing_arc")
	{range 160 160}
	("direct_settings")
)
(define "range_170"
	("standard_firing_arc")
	{range 170 170}
	("direct_settings")
)
(define "range_180"
	("standard_firing_arc")
	{range 180 180}
	("direct_settings")
)
(define "range_190"
	("standard_firing_arc")
	{range 190 190}
	("direct_settings")
)
(define "range_200"
	("standard_firing_arc")
	{range 200 200}
	("direct_settings")
)
(define "range_210"
	("standard_firing_arc")
	{range 210 210}
	("direct_settings")
)
(define "range_220"
	("standard_firing_arc")
	{range 220 220}
	("direct_settings")
)
(define "range_230"
	("standard_firing_arc")
	{range 230 230}
	("direct_settings")
)
(define "range_240"
	("standard_firing_arc")
	{range 240 240}
	("direct_settings")
)
(define "range_250"
	("standard_firing_arc")
	{range 250 250}
	("direct_settings")
)
(define "range_160_howitzer"
	("curved_firing_arc")
	{range 160 160}
	("indirect_settings")
)
(define "range_170_howitzer"
	("curved_firing_arc")
	{range 170 170}
	("indirect_settings")
)
(define "range_180_howitzer"
	("curved_firing_arc")
	{range 180 180}
	("indirect_settings")
)
(define "range_190_howitzer"
	("curved_firing_arc")
	{range 190 190}
	("indirect_settings")
)
(define "range_200_howitzer"
	("curved_firing_arc")
	{range 200 200}
	("indirect_settings")
)
(define "range_210_howitzer"
	("curved_firing_arc")
	{range 210 210}
	("indirect_settings")
)

(define "medium_artillery"
	{spreading 1 
		{SpreadPower 1.00}    ;// Shot has en equal chance of landing anywhere on the aiming circle, no centre-bias
		{SpreadXYRatio 0.75}  ;// Shots land more longitudinally than traversely.
	} 
	{ZeroingAccuracy 0.9 0.8 0.7 0.6 0.5 0.4 0.35}
	("artillery_firing_arc")
	{SpreadTolerance 0.85}		;// Zeroing up to 85% needed before fire
	{DisableRicochet}
	{traceFreq 0}
	{unlimitedRangeTPC 0}	;// restrict range in TPC/FPC
)

(define "heavy_artillery"
	{spreading 1 
		{SpreadPower 1.00}    ;// Shot has en equal chance of landing anywhere on the aiming circle, no centre-bias
		{SpreadXYRatio 0.75}  ;// Shots land more longitudinally than traversely.
	} 
	{ZeroingAccuracy 0.9 0.8 0.7 0.6 0.5 0.4 0.35}
	("artillery_firing_arc")
	{SpreadTolerance 0.85}		;// Zeroing up to 85% needed before fire
	{DisableRicochet}
	{traceFreq 0}
	{unlimitedRangeTPC 0}	;// restrict range in TPC/FPC
)

(define "super_heavy_artillery"
	{spreading 1 
		{SpreadPower 1.00}    ;// Shot has en equal chance of landing anywhere on the aiming circle, no centre-bias
		{SpreadXYRatio 0.75}  ;// Shots land more longitudinally than traversely.
	} 
	{ZeroingAccuracy 0.9 0.8 0.7 0.6 0.5 0.35}
	("artillery_firing_arc")
	{SpreadTolerance 0.85}		;// Zeroing up to 85% needed before fire
	{DisableRicochet}
	{traceFreq 0}
	{unlimitedRangeTPC 0}	;// restrict range in TPC/FPC
)


;/*============================== Slope Multipliers ==============================*/


(define "ap_slope_multiplier" ;use for AP and for any other Projectiles not specifically defined below
	{overmatchCalibre
		{0		0.1			0.0637	}
		{5		0.96297		0.0637	}
		{10		0.98297		0.0637	}
		{15		1.00066		0.0969	}
		{20		1.0361		0.13561	}
		{25		1.1116		0.16164	}
		{30		1.2195		0.19702	}
		{35		1.3771		0.22546	}
		{40		1.6263		0.26313	}
		{45		2.0033		0.34717	}
		{50		2.6447		0.57353	}
		{55		3.231		0.69075	}
		{60		4.0708		0.81826	}
		{65		6.2655		0.9192	}
		{70		8.6492		1.00539	}
		{75		13.7512		1.074	}
		{80		21.8713		1.17973	}
		{85		34.4862		1.28631	}
		{90		99.0000		0.00000	}
	}
)

(define "apc_slope_multiplier" ;use for APC & APCBC Projectiles
	{overmatchCalibre
		{0		0.1			0.0225	}
		{5		1.0000		0.0225	}
		{10		1.0243		0.0225	}
		{15		1.0532		0.0327	}
		{20		1.1039		0.0454	}
		{25		1.1741		0.0549	}
		{30		1.2667		0.0655	}
		{35		1.3925		0.0993	}
		{40		1.5642		0.1388	}
		{45		1.7933		0.1655	}
		{50		2.1053		0.2035	}
		{55		2.5368		0.2427	}
		{60		3.0796		0.245	}
		{65		4.0041		0.3354	}
		{70		5.0803		0.3478	}
		{75		6.7445		0.3831	}
		{80		9.0598		0.4131	}
		{85		12.8207		0.455	}
		{90		99.0000		0.0000	}
	}
)

(define "apbc_slope_multiplier" ;use for apbc Projectiles
	{overmatchCalibre
		{0		1.0			0.15	} ;//has worse performance against flat armor unless it overmatches
		{5		1.02		0.15	}
		{10		1.039		0.15	}
		{15		1.055		0.15	}
		{20		1.077		0.15	}
		{25		1.108		0.15	}
		{30		1.1585		0.15	}
		{35		1.2669		0.15	}
		{40		1.4474		0.16952	}
		{45		1.7028		0.24604	}
		{50		2.3008		0.3791	}
		{55		2.8917		0.56444	}
		{60		3.8672		1.07411	}
		{65		5.335		1.46188	}
		{70		9.477		1.8152	}
		{75		20.22		2.19155	}
		{80		56.2		2.5621	}
		{85		221.3		2.93265	}
		{90		99.0000		0.0000	}
	}
)

(define "apbc_slope_multiplier_original"  ;for USSR APBC & APHEBC Projectiles
	{overmatchCalibre
		{0		0.1			0.01555	}
		{5		1.02		0.01555	}
		{10		1.039		0.01555	}
		{15		1.055		0.02315	}
		{20		1.077		0.03448	}
		{25		1.108		0.05134	}
		{30		1.155		0.0771	}
		{35		1.217		0.11384	}
		{40		1.313		0.16952	}
		{45		1.441		0.24604	}
		{50		1.682		0.3791	}
		{55		2.11		0.56444	}
		{60		3.497		1.07411	}
		{65		5.335		1.46188	}
		{70		9.477		1.46188	} ;//{70	1.8152	}
		{75		20.22		1.074	} ;//{75	2.19155	}
		{80		56.2		1.17973	} ;//{80	2.5621	}
		{85		221.3		1.28631	} ;//{85	2.93265	}
		{90		99.000		0.00000	}
	}
)

(define "apcr_slope_multiplier"  ;use for APCR & HVAP Projectiles 76mm Caliber or below
	{overmatchFixed
		{0  1.00	}
		{10	1.01	}
		{10	1.03	}
		{15	1.07	}
		{20	1.13	}
		{25	1.23	}
		{30	1.36	}
		{35	1.59	}
		{40	1.90	}
		{45	2.28	}
		{50	2.78	}
		{55	3.41	}
		{60	4.23	}
		{65	5.29	}
		{70	6.69	}
		{75	8.52	}
		{80	10.93	}
		{85	14.15	}
		{90 99		}
	}
)

(define "large_apcr_slope_multiplier"  ;use for APCR & HVAP Projectiles above 76mm Caliber
	{overmatchFixed
		{0  1.00	}
		{5	1.01	}
		{10	1.04	}
		{15	1.08	}
		{20	1.13	}
		{25	1.20	}
		{30	1.29	}
		{35	1.48	}
		{40	1.76	}
		{45	2.14	}
		{50	2.68	}
		{55	3.45	}
		{60	4.58	}
		{65	6.26	}
		{70	8.82	}
		{75	12.81	}
		{80	19.19	}
		{85	29.67	}
		{90 99		}
	}
)

(define "apds_slope_multiplier"  ;for APDS Projectiles
	{overmatchFixed
		{0  1.00	}
		{5	1.002	}
		{10	1.01	}
		{15	1.03	}
		{20	1.08	}
		{25	1.14	}
		{30	1.23	}
		{35	1.37	}
		{40	1.55	}
		{45	1.82	}
		{50	2.20	}
		{55	2.74	}
		{60	3.54	}
		{65	4.74	}
		{70	6.61	}
		{75	9.57	}
		{80	14.46	}
		{85	22.82	}
		{90 99		}
	}
)

(define "heat_slope_multiplier"  ;for HEAT Projectiles & Bazooka Class Weapons
	{overmatchSlope
		{0  1}
		{90 1}
	}
)